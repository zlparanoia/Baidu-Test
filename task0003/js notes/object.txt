JavaScript面向对象学习笔记

1、this
this在全局作用范围指window。
在函数上使用this,则当前对象。函数中的this是在运行时决定的，而不是函数定义时。

2.prototype
每一个函数都有一个默认的prototype属性。

3.constructor
constructor始终指向创建当前对象的构造函数。

constructor：指向它们的构造函数。
instanceof: 验证原型对象与实例对象之间的关系。
function Cat(name) { this.name = name; }
var cat1 = new Cat();
cat1 instanceof Cat // true
cat1.constructor === Cat

构造函数模式的问题： 不能进行函数复用。

确定原型和实例的关系的两种方法：一、isPrototypeOf(): Fn.prototype.isPrototypeOf(fn1)；
二、instanceof：fn1 instanceof Fn;  //true

判断某一属性到底是实例属性还是原型属性：
hasOwnProperty(): fn1.hasOwnProperty("name");  // true

判断某个实例是否含有某个属性，包括原型：in :
"name" in fn1 ; // true
in运算符还可以用来遍历某个对象的所有属性。
for(var prop in fn1)

构造函数继承的方法：
一、构造函数绑定：使用call或apply方法，将父对象的构造函数绑定在子对象上。
call():一个参数，指向的对象。不指定则全局
apply()：两个参数，指向的对象和参数数组。
function Animal() {   
     this.species = "动物"; 
}

function Cat(name, color) {   
     Animal.apply(this, arguments);   
     this.name = name;   
     this.color = color; 
} 
var cat1 = new Cat("大毛", "黄色"); 
alert(cat1.species); // 动物

二、prototype模式
function Animal() {   
     this.species = "动物"; 
}

function Cat(name, color) {       
     this.name = name;   
     this.color = color; 
} 
Cat.prototype = new Animal();
var cat1 = new Cat("大毛", "黄色");
Cat.prototype.constructor = Cat; //如果不指定下面两个的值都是Animal，导致继承链紊乱
alert(Cat.prototype.constructor); // Cat
alert(cat1.constructor);  // Cat
alert(cat1.species); // 动物

!!! 如果替换了prototype对象，o.prototype = {};那么必须为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。o.prototype.constructor = o;

三、直接继承prototype
function Animal() {}
Animal.prototype.species = "动物";

function Cat(name, color) {       
     this.name = name;   
     this.color = color; 
} 
Cat.prototype = Animal.prototype;
var cat1 = new Cat("大毛", "黄色");
Cat.prototype.constructor = Cat;
alert(Animal.prototype.constructor); //Cat

缺点：Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。

四、利用空对象作为中介
function Animal(){}
Animal.prototype.species = "动物";
function Cat(name){
     this.name = name;
}
function extend(Child, Parent) {
     var F = function(){};
     F.prototype = Parent.prototype;
     Child.prototype = new F();
     Child.prototype.constructor = Child;
     Child.uber = Parent.prototype;  //为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。这等于在子对象上打开一条通道，可以直接调用父对象的方法。只是为了实现继承的完备性，纯属备用性质，没有不影响结果。
}
extend(Cat, Animal);
var cat1 = new Cat("mao");
alert(cat1.species);

五、拷贝继承
function Animal(){}
Animal.prototype.species = "动物";
function Cat(name){
     this.name = name;
}
function extend2(Child, Parent) {
     var p = Parent.prototype;
     var c = Child.prototype;
     for(var i in p) {
          c[i] = p[i];
     }
     c.uber = p;
}
extend2(Cat, Animal);
var cat1 = new Cat("mao");
alert(cat1.species);

非构造函数继承：
一、object()方法：
var Chinese = {
     nation: "中国"
};
function object(o) {
     function F() {}
     F.prototype = o;
     return new F();
} //这个object()函数，就是把子对象的prototype属性，指向父对象，从而使得子对象与父对象连在一起。
var Doctor = object(Chinese);
Doctor.career = "医生";
alert(Doctor.nation);

二、深拷贝：
function deepCopy(p, c) {
     var c = c || {};
     for (var i in p) {
          if(typeof p[i] === "object") {
               c[i] = (p[i].constructor === Array) ? [] : {};
               deepCopy(p[i], c[i]);
          } else {
               c[i] = p[i];
          }
     }
     return c;
}
