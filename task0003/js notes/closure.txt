JavaScript闭包学习笔记

闭包：有权访问另一个函数作用域中的变量的函数。闭包就是能够读取其他函数内部变量的函数。定义在一个函数内部的函数。

闭包是函数的“局部变量”集合。
 
闭包的最大用处：1.可以读取函数内部的变量。2.让这些变量的值始终保持在内存中。

闭包的注意点：1.由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成页面的性能问题，在ie中可能会导致内存泄露。解决方法：在退出函数之前将不使用的局部变量全部删除。

var name = "the window";

var object = {
     name : "My object",

     getNameFunc: function() {
          var that = this;
          return function() {
               return that.name;
          };
     }
};
alert(object.getNameFunc()());  // My object

var name = "the window";

var object = {
     name : "My object",

     getNameFunc: function() {
         
          return function() {
               return this.name;
          };
     }
};
alert(object.getNameFunc()());  // the window
object.getNameFunc()()相当于：var x = object.getNameFunc(); x(); x()在全局作用域下调用，因此取全局的name值。
当某个函数被调用时，会创建一个执行环境及相应的作用域链。然后，使用arguments和其他命名参数的值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，……直至作为作用域链终点的全局执行环境。

js的垃圾回收机制：
在js中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数a被b引用，b又被a外的c引用，这就是为什么函数a执行后不会被回收的原因。
